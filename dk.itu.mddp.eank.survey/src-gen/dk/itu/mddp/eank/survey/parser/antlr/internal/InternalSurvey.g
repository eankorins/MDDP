/*
* generated by Xtext
*/
grammar InternalSurvey;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package dk.itu.mddp.eank.survey.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.itu.mddp.eank.survey.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.itu.mddp.eank.survey.services.SurveyGrammarAccess;

}

@parser::members {

 	private SurveyGrammarAccess grammarAccess;
 	
    public InternalSurveyParser(TokenStream input, SurveyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SurveyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSurveysSurveyParserRuleCall_1_0()); 
	    }
		lv_surveys_1_0=ruleSurvey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"surveys",
        		lv_surveys_1_0, 
        		"Survey");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getMultipleChoiceParserRuleCall_0()); 
    }
    this_MultipleChoice_0=ruleMultipleChoice
    { 
        $current = $this_MultipleChoice_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getOpenParserRuleCall_1()); 
    }
    this_Open_1=ruleOpen
    { 
        $current = $this_Open_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRating_ImplParserRuleCall_2()); 
    }
    this_Rating_Impl_2=ruleRating_Impl
    { 
        $current = $this_Rating_Impl_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRankingParserRuleCall_3()); 
    }
    this_Ranking_3=ruleRanking
    { 
        $current = $this_Ranking_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getDichotomousParserRuleCall_4()); 
    }
    this_Dichotomous_4=ruleDichotomous
    { 
        $current = $this_Dichotomous_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getSumConstantParserRuleCall_5()); 
    }
    this_SumConstant_5=ruleSumConstant
    { 
        $current = $this_SumConstant_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getStapleParserRuleCall_6()); 
    }
    this_Staple_6=ruleStaple
    { 
        $current = $this_Staple_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSurvey
entryRuleSurvey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyRule()); }
	 iv_ruleSurvey=ruleSurvey 
	 { $current=$iv_ruleSurvey.current; } 
	 EOF 
;

// Rule Survey
ruleSurvey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSurveyAccess().getSurveyAction_0(),
            $current);
    }
)	otherlv_1='Name' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSurveyAccess().getNameKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSurveyAccess().getColonKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_3_0_0()); 
	    }
		lv_questions_3_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_3_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSurveyAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_3_1_1_0()); 
	    }
		lv_questions_5_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_5_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleMultipleChoice
entryRuleMultipleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleChoiceRule()); }
	 iv_ruleMultipleChoice=ruleMultipleChoice 
	 { $current=$iv_ruleMultipleChoice.current; } 
	 EOF 
;

// Rule MultipleChoice
ruleMultipleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultipleChoiceAccess().getMultipleChoiceAction_0(),
            $current);
    }
)	otherlv_1='MultipleChoice' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultipleChoiceAccess().getMultipleChoiceKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultipleChoiceAccess().getColonKeyword_2());
    }
(	otherlv_3='is required' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleChoiceAccess().getIsRequiredKeyword_3());
    }
)?((	otherlv_4='ask' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultipleChoiceAccess().getAskKeyword_4_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getQuestionEStringParserRuleCall_4_1_0()); 
	    }
		lv_question_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_6='you' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultipleChoiceAccess().getYouKeyword_5_0());
    }
)?(	otherlv_7='can' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMultipleChoiceAccess().getCanKeyword_5_1());
    }
)?	otherlv_8='choose' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMultipleChoiceAccess().getChooseKeyword_5_2());
    }
(	otherlv_9='from' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMultipleChoiceAccess().getFromKeyword_5_3());
    }
)?(	otherlv_10='these' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMultipleChoiceAccess().getTheseKeyword_5_4());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getChoiceChoiceParserRuleCall_5_5_0()); 
	    }
		lv_choice_11_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"choice",
        		lv_choice_11_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_5_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getChoiceChoiceParserRuleCall_5_6_1_0()); 
	    }
		lv_choice_13_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"choice",
        		lv_choice_13_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_14='or' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMultipleChoiceAccess().getOrKeyword_6_0());
    }
(	otherlv_15='free' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMultipleChoiceAccess().getFreeKeyword_6_1());
    }
)?(	otherlv_16='form' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMultipleChoiceAccess().getFormKeyword_6_2());
    }
)?(	otherlv_17='choice' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMultipleChoiceAccess().getChoiceKeyword_6_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getOtherEStringParserRuleCall_6_4_0()); 
	    }
		lv_other_18_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"other",
        		lv_other_18_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_19='conditionals' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getMultipleChoiceAccess().getConditionalsKeyword_7_0());
    }
	otherlv_20=':' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getMultipleChoiceAccess().getColonKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getMultipleChoiceForksMultipleChoiceForkParserRuleCall_7_2_0()); 
	    }
		lv_MultipleChoiceForks_21_0=ruleMultipleChoiceFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"MultipleChoiceForks",
        		lv_MultipleChoiceForks_21_0, 
        		"MultipleChoiceFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_22=',' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_7_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getMultipleChoiceForksMultipleChoiceForkParserRuleCall_7_3_1_0()); 
	    }
		lv_MultipleChoiceForks_23_0=ruleMultipleChoiceFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"MultipleChoiceForks",
        		lv_MultipleChoiceForks_23_0, 
        		"MultipleChoiceFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOpenAccess().getOpenAction_0(),
            $current);
    }
)	otherlv_1='Open' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpenAccess().getOpenKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOpenAccess().getColonKeyword_2());
    }
(	otherlv_3='is required' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOpenAccess().getIsRequiredKeyword_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getQuestionEStringParserRuleCall_4_0()); 
	    }
		lv_question_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_5='AnswerLength' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOpenAccess().getAnswerLengthKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getAnswerLengthEStringParserRuleCall_5_1_0()); 
	    }
		lv_AnswerLength_6_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"AnswerLength",
        		lv_AnswerLength_6_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRating_Impl
entryRuleRating_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRating_ImplRule()); }
	 iv_ruleRating_Impl=ruleRating_Impl 
	 { $current=$iv_ruleRating_Impl.current; } 
	 EOF 
;

// Rule Rating_Impl
ruleRating_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRating_ImplAccess().getRatingAction_0(),
            $current);
    }
)(
(
		lv_required_1_0=	'required' 
    {
        newLeafNode(lv_required_1_0, grammarAccess.getRating_ImplAccess().getRequiredRequiredKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRating_ImplRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)?	otherlv_2='Rating' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRating_ImplAccess().getRatingKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRating_ImplAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='question' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRating_ImplAccess().getQuestionKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getQuestionEStringParserRuleCall_4_1_0()); 
	    }
		lv_question_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='Min' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRating_ImplAccess().getMinKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getMinEIntParserRuleCall_5_1_0()); 
	    }
		lv_Min_7_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_7_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='Max' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRating_ImplAccess().getMaxKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getMaxEIntParserRuleCall_6_1_0()); 
	    }
		lv_Max_9_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_9_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='first' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRating_ImplAccess().getFirstKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getFirstEStringParserRuleCall_7_1_0()); 
	    }
		lv_first_11_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_11_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_12='last' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRating_ImplAccess().getLastKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getLastEStringParserRuleCall_8_1_0()); 
	    }
		lv_last_13_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_13_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_14='RatingForks' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRating_ImplAccess().getRatingForksKeyword_9_0());
    }
	otherlv_15='{' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRating_ImplAccess().getLeftCurlyBracketKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getRatingForksRatingForkParserRuleCall_9_2_0()); 
	    }
		lv_RatingForks_16_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		add(
       			$current, 
       			"RatingForks",
        		lv_RatingForks_16_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRating_ImplAccess().getCommaKeyword_9_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRating_ImplAccess().getRatingForksRatingForkParserRuleCall_9_3_1_0()); 
	    }
		lv_RatingForks_18_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRating_ImplRule());
	        }
       		add(
       			$current, 
       			"RatingForks",
        		lv_RatingForks_18_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRating_ImplAccess().getRightCurlyBracketKeyword_9_4());
    }
)?	otherlv_20='}' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getRating_ImplAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleRanking
entryRuleRanking returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingRule()); }
	 iv_ruleRanking=ruleRanking 
	 { $current=$iv_ruleRanking.current; } 
	 EOF 
;

// Rule Ranking
ruleRanking returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_required_0_0=	'required' 
    {
        newLeafNode(lv_required_0_0, grammarAccess.getRankingAccess().getRequiredRequiredKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)?	otherlv_1='Ranking' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRankingAccess().getRankingKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='question' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRankingAccess().getQuestionKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getQuestionEStringParserRuleCall_3_1_0()); 
	    }
		lv_question_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='forks' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRankingAccess().getForksKeyword_4_0());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRankingAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getForksRankingForkParserRuleCall_4_2_0()); 
	    }
		lv_forks_7_0=ruleRankingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"forks",
        		lv_forks_7_0, 
        		"RankingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRankingAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getForksRankingForkParserRuleCall_4_3_1_0()); 
	    }
		lv_forks_9_0=ruleRankingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"forks",
        		lv_forks_9_0, 
        		"RankingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRankingAccess().getRightCurlyBracketKeyword_4_4());
    }
)?	otherlv_11='choices' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRankingAccess().getChoicesKeyword_5());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRankingAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getChoicesChoiceParserRuleCall_7_0()); 
	    }
		lv_choices_13_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_13_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRankingAccess().getCommaKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getChoicesChoiceParserRuleCall_8_1_0()); 
	    }
		lv_choices_15_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_15_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRankingAccess().getRightCurlyBracketKeyword_9());
    }
	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRankingAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleDichotomous
entryRuleDichotomous returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDichotomousRule()); }
	 iv_ruleDichotomous=ruleDichotomous 
	 { $current=$iv_ruleDichotomous.current; } 
	 EOF 
;

// Rule Dichotomous
ruleDichotomous returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDichotomousAccess().getDichotomousAction_0(),
            $current);
    }
)(
(
		lv_required_1_0=	'required' 
    {
        newLeafNode(lv_required_1_0, grammarAccess.getDichotomousAccess().getRequiredRequiredKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDichotomousRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)?	otherlv_2='Dichotomous' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDichotomousAccess().getDichotomousKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDichotomousAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='question' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDichotomousAccess().getQuestionKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getQuestionEStringParserRuleCall_4_1_0()); 
	    }
		lv_question_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='yes' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDichotomousAccess().getYesKeyword_5_0());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDichotomousAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getYesQuestionParserRuleCall_5_2_0()); 
	    }
		lv_yes_8_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		add(
       			$current, 
       			"yes",
        		lv_yes_8_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDichotomousAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getYesQuestionParserRuleCall_5_3_1_0()); 
	    }
		lv_yes_10_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		add(
       			$current, 
       			"yes",
        		lv_yes_10_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDichotomousAccess().getRightCurlyBracketKeyword_5_4());
    }
)?(	otherlv_12='no' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDichotomousAccess().getNoKeyword_6_0());
    }
	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDichotomousAccess().getLeftCurlyBracketKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getNoQuestionParserRuleCall_6_2_0()); 
	    }
		lv_no_14_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		add(
       			$current, 
       			"no",
        		lv_no_14_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDichotomousAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDichotomousAccess().getNoQuestionParserRuleCall_6_3_1_0()); 
	    }
		lv_no_16_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDichotomousRule());
	        }
       		add(
       			$current, 
       			"no",
        		lv_no_16_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDichotomousAccess().getRightCurlyBracketKeyword_6_4());
    }
)?	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getDichotomousAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleSumConstant
entryRuleSumConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumConstantRule()); }
	 iv_ruleSumConstant=ruleSumConstant 
	 { $current=$iv_ruleSumConstant.current; } 
	 EOF 
;

// Rule SumConstant
ruleSumConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSumConstantAccess().getSumConstantAction_0(),
            $current);
    }
)(
(
		lv_required_1_0=	'required' 
    {
        newLeafNode(lv_required_1_0, grammarAccess.getSumConstantAccess().getRequiredRequiredKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSumConstantRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)?	otherlv_2='SumConstant' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSumConstantAccess().getSumConstantKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSumConstantAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='question' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSumConstantAccess().getQuestionKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSumConstantAccess().getQuestionEStringParserRuleCall_4_1_0()); 
	    }
		lv_question_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumConstantRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSumConstantAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleStaple
entryRuleStaple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStapleRule()); }
	 iv_ruleStaple=ruleStaple 
	 { $current=$iv_ruleStaple.current; } 
	 EOF 
;

// Rule Staple
ruleStaple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStapleAccess().getStapleAction_0(),
            $current);
    }
)(
(
		lv_required_1_0=	'required' 
    {
        newLeafNode(lv_required_1_0, grammarAccess.getStapleAccess().getRequiredRequiredKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStapleRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)?	otherlv_2='Staple' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStapleAccess().getStapleKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStapleAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='question' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStapleAccess().getQuestionKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getQuestionEStringParserRuleCall_4_1_0()); 
	    }
		lv_question_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='Min' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStapleAccess().getMinKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMinEIntParserRuleCall_5_1_0()); 
	    }
		lv_Min_7_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"Min",
        		lv_Min_7_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='Max' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStapleAccess().getMaxKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMaxEIntParserRuleCall_6_1_0()); 
	    }
		lv_Max_9_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"Max",
        		lv_Max_9_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='first' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStapleAccess().getFirstKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getFirstEStringParserRuleCall_7_1_0()); 
	    }
		lv_first_11_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_11_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_12='last' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStapleAccess().getLastKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getLastEStringParserRuleCall_8_1_0()); 
	    }
		lv_last_13_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_13_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_14='mid' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStapleAccess().getMidKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getMidEStringParserRuleCall_9_1_0()); 
	    }
		lv_mid_15_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		set(
       			$current, 
       			"mid",
        		lv_mid_15_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_16='RatingForks' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStapleAccess().getRatingForksKeyword_10_0());
    }
	otherlv_17='{' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStapleAccess().getLeftCurlyBracketKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getRatingForksRatingForkParserRuleCall_10_2_0()); 
	    }
		lv_RatingForks_18_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		add(
       			$current, 
       			"RatingForks",
        		lv_RatingForks_18_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getStapleAccess().getCommaKeyword_10_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStapleAccess().getRatingForksRatingForkParserRuleCall_10_3_1_0()); 
	    }
		lv_RatingForks_20_0=ruleRatingFork		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStapleRule());
	        }
       		add(
       			$current, 
       			"RatingForks",
        		lv_RatingForks_20_0, 
        		"RatingFork");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_21='}' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getStapleAccess().getRightCurlyBracketKeyword_10_4());
    }
)?	otherlv_22='}' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getStapleAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getDescriptionEStringParserRuleCall_0()); 
	    }
		lv_Description_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"Description",
        		lv_Description_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleMultipleChoiceFork
entryRuleMultipleChoiceFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleChoiceForkRule()); }
	 iv_ruleMultipleChoiceFork=ruleMultipleChoiceFork 
	 { $current=$iv_ruleMultipleChoiceFork.current; } 
	 EOF 
;

// Rule MultipleChoiceFork
ruleMultipleChoiceFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='condition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultipleChoiceForkAccess().getConditionKeyword_0());
    }
	otherlv_1='matcher' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultipleChoiceForkAccess().getMatcherKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceForkRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getMultipleChoiceForkAccess().getMatcherChoiceCrossReference_2_0()); 
	}

)
)(	otherlv_3='questions' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleChoiceForkAccess().getQuestionsKeyword_3_0());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultipleChoiceForkAccess().getColonKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceForkAccess().getForkedquestionsQuestionParserRuleCall_3_2_0()); 
	    }
		lv_forkedquestions_5_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestions",
        		lv_forkedquestions_5_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultipleChoiceForkAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceForkAccess().getForkedquestionsQuestionParserRuleCall_3_3_1_0()); 
	    }
		lv_forkedquestions_7_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestions",
        		lv_forkedquestions_7_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRatingFork
entryRuleRatingFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRatingForkRule()); }
	 iv_ruleRatingFork=ruleRatingFork 
	 { $current=$iv_ruleRatingFork.current; } 
	 EOF 
;

// Rule RatingFork
ruleRatingFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRatingForkAccess().getRatingForkAction_0(),
            $current);
    }
)	otherlv_1='RatingFork' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRatingForkAccess().getRatingForkKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRatingForkAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='min' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRatingForkAccess().getMinKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getMinEIntParserRuleCall_3_1_0()); 
	    }
		lv_min_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='max' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRatingForkAccess().getMaxKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getMaxEIntParserRuleCall_4_1_0()); 
	    }
		lv_max_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='conditionals' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRatingForkAccess().getConditionalsKeyword_5_0());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRatingForkAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getForkedquestionQuestionParserRuleCall_5_2_0()); 
	    }
		lv_forkedquestion_9_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestion",
        		lv_forkedquestion_9_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRatingForkAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingForkAccess().getForkedquestionQuestionParserRuleCall_5_3_1_0()); 
	    }
		lv_forkedquestion_11_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestion",
        		lv_forkedquestion_11_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRatingForkAccess().getRightCurlyBracketKeyword_5_4());
    }
)?	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRatingForkAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleRankingFork
entryRuleRankingFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingForkRule()); }
	 iv_ruleRankingFork=ruleRankingFork 
	 { $current=$iv_ruleRankingFork.current; } 
	 EOF 
;

// Rule RankingFork
ruleRankingFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='RankingFork' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRankingForkAccess().getRankingForkKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRankingForkAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='min' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingForkAccess().getMinKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getMinEIntParserRuleCall_2_1_0()); 
	    }
		lv_min_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingForkRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='max' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRankingForkAccess().getMaxKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getMaxEIntParserRuleCall_3_1_0()); 
	    }
		lv_max_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingForkRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='matcher' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRankingForkAccess().getMatcherKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRankingForkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getMatcherChoiceCrossReference_5_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='forkedquestions' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRankingForkAccess().getForkedquestionsKeyword_6_0());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRankingForkAccess().getLeftCurlyBracketKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getForkedquestionsQuestionParserRuleCall_6_2_0()); 
	    }
		lv_forkedquestions_10_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestions",
        		lv_forkedquestions_10_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRankingForkAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingForkAccess().getForkedquestionsQuestionParserRuleCall_6_3_1_0()); 
	    }
		lv_forkedquestions_12_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingForkRule());
	        }
       		add(
       			$current, 
       			"forkedquestions",
        		lv_forkedquestions_12_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRankingForkAccess().getRightCurlyBracketKeyword_6_4());
    }
)?	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRankingForkAccess().getRightCurlyBracketKeyword_7());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


