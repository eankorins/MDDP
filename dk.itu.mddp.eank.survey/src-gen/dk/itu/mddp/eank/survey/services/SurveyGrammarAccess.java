/*
* generated by Xtext
*/
package dk.itu.mddp.eank.survey.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSurveysAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSurveysSurveyParserRuleCall_1_0 = (RuleCall)cSurveysAssignment_1.eContents().get(0);
		
		//Model:
		//	{Model} surveys+=Survey?;
		public ParserRule getRule() { return rule; }

		//{Model} surveys+=Survey?
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//surveys+=Survey?
		public Assignment getSurveysAssignment_1() { return cSurveysAssignment_1; }

		//Survey
		public RuleCall getSurveysSurveyParserRuleCall_1_0() { return cSurveysSurveyParserRuleCall_1_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultipleChoiceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRating_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRankingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDichotomousParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSumConstantParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStapleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Question:
		//	MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple;
		public ParserRule getRule() { return rule; }

		//MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple
		public Alternatives getAlternatives() { return cAlternatives; }

		//MultipleChoice
		public RuleCall getMultipleChoiceParserRuleCall_0() { return cMultipleChoiceParserRuleCall_0; }

		//Open
		public RuleCall getOpenParserRuleCall_1() { return cOpenParserRuleCall_1; }

		//Rating_Impl
		public RuleCall getRating_ImplParserRuleCall_2() { return cRating_ImplParserRuleCall_2; }

		//Ranking
		public RuleCall getRankingParserRuleCall_3() { return cRankingParserRuleCall_3; }

		//Dichotomous
		public RuleCall getDichotomousParserRuleCall_4() { return cDichotomousParserRuleCall_4; }

		//SumConstant
		public RuleCall getSumConstantParserRuleCall_5() { return cSumConstantParserRuleCall_5; }

		//Staple
		public RuleCall getStapleParserRuleCall_6() { return cStapleParserRuleCall_6; }
	}

	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSurveyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cQuestionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_0_0 = (RuleCall)cQuestionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cQuestionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_1_1_0 = (RuleCall)cQuestionsAssignment_3_1_1.eContents().get(0);
		
		//Survey:
		//	{Survey} "Name" ":" (questions+=Question ("," questions+=Question)*)?;
		public ParserRule getRule() { return rule; }

		//{Survey} "Name" ":" (questions+=Question ("," questions+=Question)*)?
		public Group getGroup() { return cGroup; }

		//{Survey}
		public Action getSurveyAction_0() { return cSurveyAction_0; }

		//"Name"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(questions+=Question ("," questions+=Question)*)?
		public Group getGroup_3() { return cGroup_3; }

		//questions+=Question
		public Assignment getQuestionsAssignment_3_0() { return cQuestionsAssignment_3_0; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_0_0() { return cQuestionsQuestionParserRuleCall_3_0_0; }

		//("," questions+=Question)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//questions+=Question
		public Assignment getQuestionsAssignment_3_1_1() { return cQuestionsAssignment_3_1_1; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_1_1_0() { return cQuestionsQuestionParserRuleCall_3_1_1_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class MultipleChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultipleChoiceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMultipleChoiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIsRequiredKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAskKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQuestionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQuestionEStringParserRuleCall_4_1_0 = (RuleCall)cQuestionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cYouKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cCanKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cChooseKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cFromKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cTheseKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cChoiceAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cChoiceChoiceParserRuleCall_5_5_0 = (RuleCall)cChoiceAssignment_5_5.eContents().get(0);
		private final Group cGroup_5_6 = (Group)cGroup_5.eContents().get(6);
		private final Keyword cCommaKeyword_5_6_0 = (Keyword)cGroup_5_6.eContents().get(0);
		private final Assignment cChoiceAssignment_5_6_1 = (Assignment)cGroup_5_6.eContents().get(1);
		private final RuleCall cChoiceChoiceParserRuleCall_5_6_1_0 = (RuleCall)cChoiceAssignment_5_6_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOrKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cFreeKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cFormKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cChoiceKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cOtherAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cOtherEStringParserRuleCall_6_4_0 = (RuleCall)cOtherAssignment_6_4.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cConditionalsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMultipleChoiceForksAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMultipleChoiceForksMultipleChoiceForkParserRuleCall_7_2_0 = (RuleCall)cMultipleChoiceForksAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cMultipleChoiceForksAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cMultipleChoiceForksMultipleChoiceForkParserRuleCall_7_3_1_0 = (RuleCall)cMultipleChoiceForksAssignment_7_3_1.eContents().get(0);
		
		//MultipleChoice:
		//	{MultipleChoice} "MultipleChoice" ":" "is required"? ("ask"? question=EString)? ("you"? "can"? "choose" "from"?
		//	"these"? choice+=Choice ("," choice+=Choice)*)? ("or" "free"? "form"? "choice"? other=EString)? ("conditionals" ":"
		//	MultipleChoiceForks+=MultipleChoiceFork ("," MultipleChoiceForks+=MultipleChoiceFork)*)?;
		public ParserRule getRule() { return rule; }

		//{MultipleChoice} "MultipleChoice" ":" "is required"? ("ask"? question=EString)? ("you"? "can"? "choose" "from"? "these"?
		//choice+=Choice ("," choice+=Choice)*)? ("or" "free"? "form"? "choice"? other=EString)? ("conditionals" ":"
		//MultipleChoiceForks+=MultipleChoiceFork ("," MultipleChoiceForks+=MultipleChoiceFork)*)?
		public Group getGroup() { return cGroup; }

		//{MultipleChoice}
		public Action getMultipleChoiceAction_0() { return cMultipleChoiceAction_0; }

		//"MultipleChoice"
		public Keyword getMultipleChoiceKeyword_1() { return cMultipleChoiceKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"is required"?
		public Keyword getIsRequiredKeyword_3() { return cIsRequiredKeyword_3; }

		//("ask"? question=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//"ask"?
		public Keyword getAskKeyword_4_0() { return cAskKeyword_4_0; }

		//question=EString
		public Assignment getQuestionAssignment_4_1() { return cQuestionAssignment_4_1; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_4_1_0() { return cQuestionEStringParserRuleCall_4_1_0; }

		//("you"? "can"? "choose" "from"? "these"? choice+=Choice ("," choice+=Choice)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"you"?
		public Keyword getYouKeyword_5_0() { return cYouKeyword_5_0; }

		//"can"?
		public Keyword getCanKeyword_5_1() { return cCanKeyword_5_1; }

		//"choose"
		public Keyword getChooseKeyword_5_2() { return cChooseKeyword_5_2; }

		//"from"?
		public Keyword getFromKeyword_5_3() { return cFromKeyword_5_3; }

		//"these"?
		public Keyword getTheseKeyword_5_4() { return cTheseKeyword_5_4; }

		//choice+=Choice
		public Assignment getChoiceAssignment_5_5() { return cChoiceAssignment_5_5; }

		//Choice
		public RuleCall getChoiceChoiceParserRuleCall_5_5_0() { return cChoiceChoiceParserRuleCall_5_5_0; }

		//("," choice+=Choice)*
		public Group getGroup_5_6() { return cGroup_5_6; }

		//","
		public Keyword getCommaKeyword_5_6_0() { return cCommaKeyword_5_6_0; }

		//choice+=Choice
		public Assignment getChoiceAssignment_5_6_1() { return cChoiceAssignment_5_6_1; }

		//Choice
		public RuleCall getChoiceChoiceParserRuleCall_5_6_1_0() { return cChoiceChoiceParserRuleCall_5_6_1_0; }

		//("or" "free"? "form"? "choice"? other=EString)?
		public Group getGroup_6() { return cGroup_6; }

		//"or"
		public Keyword getOrKeyword_6_0() { return cOrKeyword_6_0; }

		//"free"?
		public Keyword getFreeKeyword_6_1() { return cFreeKeyword_6_1; }

		//"form"?
		public Keyword getFormKeyword_6_2() { return cFormKeyword_6_2; }

		//"choice"?
		public Keyword getChoiceKeyword_6_3() { return cChoiceKeyword_6_3; }

		//other=EString
		public Assignment getOtherAssignment_6_4() { return cOtherAssignment_6_4; }

		//EString
		public RuleCall getOtherEStringParserRuleCall_6_4_0() { return cOtherEStringParserRuleCall_6_4_0; }

		//("conditionals" ":" MultipleChoiceForks+=MultipleChoiceFork ("," MultipleChoiceForks+=MultipleChoiceFork)*)?
		public Group getGroup_7() { return cGroup_7; }

		//"conditionals"
		public Keyword getConditionalsKeyword_7_0() { return cConditionalsKeyword_7_0; }

		//":"
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }

		//MultipleChoiceForks+=MultipleChoiceFork
		public Assignment getMultipleChoiceForksAssignment_7_2() { return cMultipleChoiceForksAssignment_7_2; }

		//MultipleChoiceFork
		public RuleCall getMultipleChoiceForksMultipleChoiceForkParserRuleCall_7_2_0() { return cMultipleChoiceForksMultipleChoiceForkParserRuleCall_7_2_0; }

		//("," MultipleChoiceForks+=MultipleChoiceFork)*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//MultipleChoiceForks+=MultipleChoiceFork
		public Assignment getMultipleChoiceForksAssignment_7_3_1() { return cMultipleChoiceForksAssignment_7_3_1; }

		//MultipleChoiceFork
		public RuleCall getMultipleChoiceForksMultipleChoiceForkParserRuleCall_7_3_1_0() { return cMultipleChoiceForksMultipleChoiceForkParserRuleCall_7_3_1_0; }
	}

	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIsRequiredKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQuestionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionEStringParserRuleCall_4_0 = (RuleCall)cQuestionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAnswerLengthKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAnswerLengthAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAnswerLengthEStringParserRuleCall_5_1_0 = (RuleCall)cAnswerLengthAssignment_5_1.eContents().get(0);
		
		//Open:
		//	{Open} "Open" ":" "is required"? question=EString? ("AnswerLength" AnswerLength=EString)?;
		public ParserRule getRule() { return rule; }

		//{Open} "Open" ":" "is required"? question=EString? ("AnswerLength" AnswerLength=EString)?
		public Group getGroup() { return cGroup; }

		//{Open}
		public Action getOpenAction_0() { return cOpenAction_0; }

		//"Open"
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"is required"?
		public Keyword getIsRequiredKeyword_3() { return cIsRequiredKeyword_3; }

		//question=EString?
		public Assignment getQuestionAssignment_4() { return cQuestionAssignment_4; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_4_0() { return cQuestionEStringParserRuleCall_4_0; }

		//("AnswerLength" AnswerLength=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"AnswerLength"
		public Keyword getAnswerLengthKeyword_5_0() { return cAnswerLengthKeyword_5_0; }

		//AnswerLength=EString
		public Assignment getAnswerLengthAssignment_5_1() { return cAnswerLengthAssignment_5_1; }

		//EString
		public RuleCall getAnswerLengthEStringParserRuleCall_5_1_0() { return cAnswerLengthEStringParserRuleCall_5_1_0; }
	}

	public class Rating_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rating_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRatingAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_1_0 = (Keyword)cRequiredAssignment_1.eContents().get(0);
		private final Keyword cRatingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cQuestionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQuestionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQuestionEStringParserRuleCall_4_1_0 = (RuleCall)cQuestionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMinKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMinAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_5_1_0 = (RuleCall)cMinAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMaxKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMaxAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_6_1_0 = (RuleCall)cMaxAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFirstKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFirstAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFirstEStringParserRuleCall_7_1_0 = (RuleCall)cFirstAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLastKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLastAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLastEStringParserRuleCall_8_1_0 = (RuleCall)cLastAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cRatingForksKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cRatingForksAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cRatingForksRatingForkParserRuleCall_9_2_0 = (RuleCall)cRatingForksAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cRatingForksAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cRatingForksRatingForkParserRuleCall_9_3_1_0 = (RuleCall)cRatingForksAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Rating_Impl returns Rating:
		//	{Rating} required?="required"? "Rating" "{" ("question" question=EString)? ("Min" Min=EInt)? ("Max" Max=EInt)?
		//	("first" first=EString)? ("last" last=EString)? ("RatingForks" "{" RatingForks+=RatingFork (","
		//	RatingForks+=RatingFork)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{Rating} required?="required"? "Rating" "{" ("question" question=EString)? ("Min" Min=EInt)? ("Max" Max=EInt)? ("first"
		//first=EString)? ("last" last=EString)? ("RatingForks" "{" RatingForks+=RatingFork ("," RatingForks+=RatingFork)* "}")?
		//"}"
		public Group getGroup() { return cGroup; }

		//{Rating}
		public Action getRatingAction_0() { return cRatingAction_0; }

		//required?="required"?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }

		//"required"
		public Keyword getRequiredRequiredKeyword_1_0() { return cRequiredRequiredKeyword_1_0; }

		//"Rating"
		public Keyword getRatingKeyword_2() { return cRatingKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("question" question=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//"question"
		public Keyword getQuestionKeyword_4_0() { return cQuestionKeyword_4_0; }

		//question=EString
		public Assignment getQuestionAssignment_4_1() { return cQuestionAssignment_4_1; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_4_1_0() { return cQuestionEStringParserRuleCall_4_1_0; }

		//("Min" Min=EInt)?
		public Group getGroup_5() { return cGroup_5; }

		//"Min"
		public Keyword getMinKeyword_5_0() { return cMinKeyword_5_0; }

		//Min=EInt
		public Assignment getMinAssignment_5_1() { return cMinAssignment_5_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_5_1_0() { return cMinEIntParserRuleCall_5_1_0; }

		//("Max" Max=EInt)?
		public Group getGroup_6() { return cGroup_6; }

		//"Max"
		public Keyword getMaxKeyword_6_0() { return cMaxKeyword_6_0; }

		//Max=EInt
		public Assignment getMaxAssignment_6_1() { return cMaxAssignment_6_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_6_1_0() { return cMaxEIntParserRuleCall_6_1_0; }

		//("first" first=EString)?
		public Group getGroup_7() { return cGroup_7; }

		//"first"
		public Keyword getFirstKeyword_7_0() { return cFirstKeyword_7_0; }

		//first=EString
		public Assignment getFirstAssignment_7_1() { return cFirstAssignment_7_1; }

		//EString
		public RuleCall getFirstEStringParserRuleCall_7_1_0() { return cFirstEStringParserRuleCall_7_1_0; }

		//("last" last=EString)?
		public Group getGroup_8() { return cGroup_8; }

		//"last"
		public Keyword getLastKeyword_8_0() { return cLastKeyword_8_0; }

		//last=EString
		public Assignment getLastAssignment_8_1() { return cLastAssignment_8_1; }

		//EString
		public RuleCall getLastEStringParserRuleCall_8_1_0() { return cLastEStringParserRuleCall_8_1_0; }

		//("RatingForks" "{" RatingForks+=RatingFork ("," RatingForks+=RatingFork)* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"RatingForks"
		public Keyword getRatingForksKeyword_9_0() { return cRatingForksKeyword_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }

		//RatingForks+=RatingFork
		public Assignment getRatingForksAssignment_9_2() { return cRatingForksAssignment_9_2; }

		//RatingFork
		public RuleCall getRatingForksRatingForkParserRuleCall_9_2_0() { return cRatingForksRatingForkParserRuleCall_9_2_0; }

		//("," RatingForks+=RatingFork)*
		public Group getGroup_9_3() { return cGroup_9_3; }

		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }

		//RatingForks+=RatingFork
		public Assignment getRatingForksAssignment_9_3_1() { return cRatingForksAssignment_9_3_1; }

		//RatingFork
		public RuleCall getRatingForksRatingForkParserRuleCall_9_3_1_0() { return cRatingForksRatingForkParserRuleCall_9_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class RankingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ranking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRequiredRequiredKeyword_0_0 = (Keyword)cRequiredAssignment_0.eContents().get(0);
		private final Keyword cRankingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cQuestionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQuestionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQuestionEStringParserRuleCall_3_1_0 = (RuleCall)cQuestionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cForksKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cForksAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cForksRankingForkParserRuleCall_4_2_0 = (RuleCall)cForksAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cForksAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cForksRankingForkParserRuleCall_4_3_1_0 = (RuleCall)cForksAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cChoicesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cChoicesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChoicesChoiceParserRuleCall_7_0 = (RuleCall)cChoicesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cChoicesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cChoicesChoiceParserRuleCall_8_1_0 = (RuleCall)cChoicesAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Ranking:
		//	required?="required"? "Ranking" "{" ("question" question=EString)? ("forks" "{" forks+=RankingFork (","
		//	forks+=RankingFork)* "}")? "choices" "{" choices+=Choice ("," choices+=Choice)* "}" "}";
		public ParserRule getRule() { return rule; }

		//required?="required"? "Ranking" "{" ("question" question=EString)? ("forks" "{" forks+=RankingFork (","
		//forks+=RankingFork)* "}")? "choices" "{" choices+=Choice ("," choices+=Choice)* "}" "}"
		public Group getGroup() { return cGroup; }

		//required?="required"?
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }

		//"required"
		public Keyword getRequiredRequiredKeyword_0_0() { return cRequiredRequiredKeyword_0_0; }

		//"Ranking"
		public Keyword getRankingKeyword_1() { return cRankingKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("question" question=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"question"
		public Keyword getQuestionKeyword_3_0() { return cQuestionKeyword_3_0; }

		//question=EString
		public Assignment getQuestionAssignment_3_1() { return cQuestionAssignment_3_1; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_3_1_0() { return cQuestionEStringParserRuleCall_3_1_0; }

		//("forks" "{" forks+=RankingFork ("," forks+=RankingFork)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"forks"
		public Keyword getForksKeyword_4_0() { return cForksKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//forks+=RankingFork
		public Assignment getForksAssignment_4_2() { return cForksAssignment_4_2; }

		//RankingFork
		public RuleCall getForksRankingForkParserRuleCall_4_2_0() { return cForksRankingForkParserRuleCall_4_2_0; }

		//("," forks+=RankingFork)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//forks+=RankingFork
		public Assignment getForksAssignment_4_3_1() { return cForksAssignment_4_3_1; }

		//RankingFork
		public RuleCall getForksRankingForkParserRuleCall_4_3_1_0() { return cForksRankingForkParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//"choices"
		public Keyword getChoicesKeyword_5() { return cChoicesKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//choices+=Choice
		public Assignment getChoicesAssignment_7() { return cChoicesAssignment_7; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_7_0() { return cChoicesChoiceParserRuleCall_7_0; }

		//("," choices+=Choice)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//choices+=Choice
		public Assignment getChoicesAssignment_8_1() { return cChoicesAssignment_8_1; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_8_1_0() { return cChoicesChoiceParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class DichotomousElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dichotomous");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDichotomousAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_1_0 = (Keyword)cRequiredAssignment_1.eContents().get(0);
		private final Keyword cDichotomousKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cQuestionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQuestionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQuestionEStringParserRuleCall_4_1_0 = (RuleCall)cQuestionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cYesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cYesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cYesQuestionParserRuleCall_5_2_0 = (RuleCall)cYesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cYesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cYesQuestionParserRuleCall_5_3_1_0 = (RuleCall)cYesAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cNoKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cNoAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cNoQuestionParserRuleCall_6_2_0 = (RuleCall)cNoAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cNoAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cNoQuestionParserRuleCall_6_3_1_0 = (RuleCall)cNoAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Dichotomous:
		//	{Dichotomous} required?="required"? "Dichotomous" "{" ("question" question=EString)? ("yes" "{" yes+=Question (","
		//	yes+=Question)* "}")? ("no" "{" no+=Question ("," no+=Question)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{Dichotomous} required?="required"? "Dichotomous" "{" ("question" question=EString)? ("yes" "{" yes+=Question (","
		//yes+=Question)* "}")? ("no" "{" no+=Question ("," no+=Question)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{Dichotomous}
		public Action getDichotomousAction_0() { return cDichotomousAction_0; }

		//required?="required"?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }

		//"required"
		public Keyword getRequiredRequiredKeyword_1_0() { return cRequiredRequiredKeyword_1_0; }

		//"Dichotomous"
		public Keyword getDichotomousKeyword_2() { return cDichotomousKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("question" question=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//"question"
		public Keyword getQuestionKeyword_4_0() { return cQuestionKeyword_4_0; }

		//question=EString
		public Assignment getQuestionAssignment_4_1() { return cQuestionAssignment_4_1; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_4_1_0() { return cQuestionEStringParserRuleCall_4_1_0; }

		//("yes" "{" yes+=Question ("," yes+=Question)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"yes"
		public Keyword getYesKeyword_5_0() { return cYesKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//yes+=Question
		public Assignment getYesAssignment_5_2() { return cYesAssignment_5_2; }

		//Question
		public RuleCall getYesQuestionParserRuleCall_5_2_0() { return cYesQuestionParserRuleCall_5_2_0; }

		//("," yes+=Question)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//yes+=Question
		public Assignment getYesAssignment_5_3_1() { return cYesAssignment_5_3_1; }

		//Question
		public RuleCall getYesQuestionParserRuleCall_5_3_1_0() { return cYesQuestionParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//("no" "{" no+=Question ("," no+=Question)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"no"
		public Keyword getNoKeyword_6_0() { return cNoKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//no+=Question
		public Assignment getNoAssignment_6_2() { return cNoAssignment_6_2; }

		//Question
		public RuleCall getNoQuestionParserRuleCall_6_2_0() { return cNoQuestionParserRuleCall_6_2_0; }

		//("," no+=Question)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//no+=Question
		public Assignment getNoAssignment_6_3_1() { return cNoAssignment_6_3_1; }

		//Question
		public RuleCall getNoQuestionParserRuleCall_6_3_1_0() { return cNoQuestionParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SumConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSumConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_1_0 = (Keyword)cRequiredAssignment_1.eContents().get(0);
		private final Keyword cSumConstantKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cQuestionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQuestionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQuestionEStringParserRuleCall_4_1_0 = (RuleCall)cQuestionAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SumConstant:
		//	{SumConstant} required?="required"? "SumConstant" "{" ("question" question=EString)? "}";
		public ParserRule getRule() { return rule; }

		//{SumConstant} required?="required"? "SumConstant" "{" ("question" question=EString)? "}"
		public Group getGroup() { return cGroup; }

		//{SumConstant}
		public Action getSumConstantAction_0() { return cSumConstantAction_0; }

		//required?="required"?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }

		//"required"
		public Keyword getRequiredRequiredKeyword_1_0() { return cRequiredRequiredKeyword_1_0; }

		//"SumConstant"
		public Keyword getSumConstantKeyword_2() { return cSumConstantKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("question" question=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//"question"
		public Keyword getQuestionKeyword_4_0() { return cQuestionKeyword_4_0; }

		//question=EString
		public Assignment getQuestionAssignment_4_1() { return cQuestionAssignment_4_1; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_4_1_0() { return cQuestionEStringParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StapleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Staple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStapleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_1_0 = (Keyword)cRequiredAssignment_1.eContents().get(0);
		private final Keyword cStapleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cQuestionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQuestionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQuestionEStringParserRuleCall_4_1_0 = (RuleCall)cQuestionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMinKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMinAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_5_1_0 = (RuleCall)cMinAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMaxKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMaxAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_6_1_0 = (RuleCall)cMaxAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFirstKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFirstAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFirstEStringParserRuleCall_7_1_0 = (RuleCall)cFirstAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLastKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLastAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLastEStringParserRuleCall_8_1_0 = (RuleCall)cLastAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cMidKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cMidAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cMidEStringParserRuleCall_9_1_0 = (RuleCall)cMidAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cRatingForksKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cRatingForksAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cRatingForksRatingForkParserRuleCall_10_2_0 = (RuleCall)cRatingForksAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cRatingForksAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cRatingForksRatingForkParserRuleCall_10_3_1_0 = (RuleCall)cRatingForksAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Staple:
		//	{Staple} required?="required"? "Staple" "{" ("question" question=EString)? ("Min" Min=EInt)? ("Max" Max=EInt)?
		//	("first" first=EString)? ("last" last=EString)? ("mid" mid=EString)? ("RatingForks" "{" RatingForks+=RatingFork (","
		//	RatingForks+=RatingFork)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{Staple} required?="required"? "Staple" "{" ("question" question=EString)? ("Min" Min=EInt)? ("Max" Max=EInt)? ("first"
		//first=EString)? ("last" last=EString)? ("mid" mid=EString)? ("RatingForks" "{" RatingForks+=RatingFork (","
		//RatingForks+=RatingFork)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{Staple}
		public Action getStapleAction_0() { return cStapleAction_0; }

		//required?="required"?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }

		//"required"
		public Keyword getRequiredRequiredKeyword_1_0() { return cRequiredRequiredKeyword_1_0; }

		//"Staple"
		public Keyword getStapleKeyword_2() { return cStapleKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("question" question=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//"question"
		public Keyword getQuestionKeyword_4_0() { return cQuestionKeyword_4_0; }

		//question=EString
		public Assignment getQuestionAssignment_4_1() { return cQuestionAssignment_4_1; }

		//EString
		public RuleCall getQuestionEStringParserRuleCall_4_1_0() { return cQuestionEStringParserRuleCall_4_1_0; }

		//("Min" Min=EInt)?
		public Group getGroup_5() { return cGroup_5; }

		//"Min"
		public Keyword getMinKeyword_5_0() { return cMinKeyword_5_0; }

		//Min=EInt
		public Assignment getMinAssignment_5_1() { return cMinAssignment_5_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_5_1_0() { return cMinEIntParserRuleCall_5_1_0; }

		//("Max" Max=EInt)?
		public Group getGroup_6() { return cGroup_6; }

		//"Max"
		public Keyword getMaxKeyword_6_0() { return cMaxKeyword_6_0; }

		//Max=EInt
		public Assignment getMaxAssignment_6_1() { return cMaxAssignment_6_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_6_1_0() { return cMaxEIntParserRuleCall_6_1_0; }

		//("first" first=EString)?
		public Group getGroup_7() { return cGroup_7; }

		//"first"
		public Keyword getFirstKeyword_7_0() { return cFirstKeyword_7_0; }

		//first=EString
		public Assignment getFirstAssignment_7_1() { return cFirstAssignment_7_1; }

		//EString
		public RuleCall getFirstEStringParserRuleCall_7_1_0() { return cFirstEStringParserRuleCall_7_1_0; }

		//("last" last=EString)?
		public Group getGroup_8() { return cGroup_8; }

		//"last"
		public Keyword getLastKeyword_8_0() { return cLastKeyword_8_0; }

		//last=EString
		public Assignment getLastAssignment_8_1() { return cLastAssignment_8_1; }

		//EString
		public RuleCall getLastEStringParserRuleCall_8_1_0() { return cLastEStringParserRuleCall_8_1_0; }

		//("mid" mid=EString)?
		public Group getGroup_9() { return cGroup_9; }

		//"mid"
		public Keyword getMidKeyword_9_0() { return cMidKeyword_9_0; }

		//mid=EString
		public Assignment getMidAssignment_9_1() { return cMidAssignment_9_1; }

		//EString
		public RuleCall getMidEStringParserRuleCall_9_1_0() { return cMidEStringParserRuleCall_9_1_0; }

		//("RatingForks" "{" RatingForks+=RatingFork ("," RatingForks+=RatingFork)* "}")?
		public Group getGroup_10() { return cGroup_10; }

		//"RatingForks"
		public Keyword getRatingForksKeyword_10_0() { return cRatingForksKeyword_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }

		//RatingForks+=RatingFork
		public Assignment getRatingForksAssignment_10_2() { return cRatingForksAssignment_10_2; }

		//RatingFork
		public RuleCall getRatingForksRatingForkParserRuleCall_10_2_0() { return cRatingForksRatingForkParserRuleCall_10_2_0; }

		//("," RatingForks+=RatingFork)*
		public Group getGroup_10_3() { return cGroup_10_3; }

		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }

		//RatingForks+=RatingFork
		public Assignment getRatingForksAssignment_10_3_1() { return cRatingForksAssignment_10_3_1; }

		//RatingFork
		public RuleCall getRatingForksRatingForkParserRuleCall_10_3_1_0() { return cRatingForksRatingForkParserRuleCall_10_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Assignment cDescriptionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_0 = (RuleCall)cDescriptionAssignment.eContents().get(0);
		
		//Choice:
		//	Description=EString;
		public ParserRule getRule() { return rule; }

		//Description=EString
		public Assignment getDescriptionAssignment() { return cDescriptionAssignment; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_0() { return cDescriptionEStringParserRuleCall_0; }
	}

	public class MultipleChoiceForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoiceFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMatcherKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMatcherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMatcherChoiceCrossReference_2_0 = (CrossReference)cMatcherAssignment_2.eContents().get(0);
		private final RuleCall cMatcherChoiceIDTerminalRuleCall_2_0_1 = (RuleCall)cMatcherChoiceCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cQuestionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cForkedquestionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cForkedquestionsQuestionParserRuleCall_3_2_0 = (RuleCall)cForkedquestionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cForkedquestionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cForkedquestionsQuestionParserRuleCall_3_3_1_0 = (RuleCall)cForkedquestionsAssignment_3_3_1.eContents().get(0);
		
		//MultipleChoiceFork:
		//	"condition" "matcher" matcher=[Choice] ("questions" ":" forkedquestions+=Question ("," forkedquestions+=Question)*)?;
		public ParserRule getRule() { return rule; }

		//"condition" "matcher" matcher=[Choice] ("questions" ":" forkedquestions+=Question ("," forkedquestions+=Question)*)?
		public Group getGroup() { return cGroup; }

		//"condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//"matcher"
		public Keyword getMatcherKeyword_1() { return cMatcherKeyword_1; }

		//matcher=[Choice]
		public Assignment getMatcherAssignment_2() { return cMatcherAssignment_2; }

		//[Choice]
		public CrossReference getMatcherChoiceCrossReference_2_0() { return cMatcherChoiceCrossReference_2_0; }

		//ID
		public RuleCall getMatcherChoiceIDTerminalRuleCall_2_0_1() { return cMatcherChoiceIDTerminalRuleCall_2_0_1; }

		//("questions" ":" forkedquestions+=Question ("," forkedquestions+=Question)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"questions"
		public Keyword getQuestionsKeyword_3_0() { return cQuestionsKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//forkedquestions+=Question
		public Assignment getForkedquestionsAssignment_3_2() { return cForkedquestionsAssignment_3_2; }

		//Question
		public RuleCall getForkedquestionsQuestionParserRuleCall_3_2_0() { return cForkedquestionsQuestionParserRuleCall_3_2_0; }

		//("," forkedquestions+=Question)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//forkedquestions+=Question
		public Assignment getForkedquestionsAssignment_3_3_1() { return cForkedquestionsAssignment_3_3_1; }

		//Question
		public RuleCall getForkedquestionsQuestionParserRuleCall_3_3_1_0() { return cForkedquestionsQuestionParserRuleCall_3_3_1_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class RatingForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RatingFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRatingForkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRatingForkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMinKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMinAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_3_1_0 = (RuleCall)cMinAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMaxKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMaxAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_4_1_0 = (RuleCall)cMaxAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConditionalsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cForkedquestionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cForkedquestionQuestionParserRuleCall_5_2_0 = (RuleCall)cForkedquestionAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cForkedquestionAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cForkedquestionQuestionParserRuleCall_5_3_1_0 = (RuleCall)cForkedquestionAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RatingFork:
		//	{RatingFork} "RatingFork" "{" ("min" min=EInt)? ("max" max=EInt)? ("conditionals" "{" forkedquestion+=Question (","
		//	forkedquestion+=Question)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{RatingFork} "RatingFork" "{" ("min" min=EInt)? ("max" max=EInt)? ("conditionals" "{" forkedquestion+=Question (","
		//forkedquestion+=Question)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{RatingFork}
		public Action getRatingForkAction_0() { return cRatingForkAction_0; }

		//"RatingFork"
		public Keyword getRatingForkKeyword_1() { return cRatingForkKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("min" min=EInt)?
		public Group getGroup_3() { return cGroup_3; }

		//"min"
		public Keyword getMinKeyword_3_0() { return cMinKeyword_3_0; }

		//min=EInt
		public Assignment getMinAssignment_3_1() { return cMinAssignment_3_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_3_1_0() { return cMinEIntParserRuleCall_3_1_0; }

		//("max" max=EInt)?
		public Group getGroup_4() { return cGroup_4; }

		//"max"
		public Keyword getMaxKeyword_4_0() { return cMaxKeyword_4_0; }

		//max=EInt
		public Assignment getMaxAssignment_4_1() { return cMaxAssignment_4_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_4_1_0() { return cMaxEIntParserRuleCall_4_1_0; }

		//("conditionals" "{" forkedquestion+=Question ("," forkedquestion+=Question)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"conditionals"
		public Keyword getConditionalsKeyword_5_0() { return cConditionalsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//forkedquestion+=Question
		public Assignment getForkedquestionAssignment_5_2() { return cForkedquestionAssignment_5_2; }

		//Question
		public RuleCall getForkedquestionQuestionParserRuleCall_5_2_0() { return cForkedquestionQuestionParserRuleCall_5_2_0; }

		//("," forkedquestion+=Question)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//forkedquestion+=Question
		public Assignment getForkedquestionAssignment_5_3_1() { return cForkedquestionAssignment_5_3_1; }

		//Question
		public RuleCall getForkedquestionQuestionParserRuleCall_5_3_1_0() { return cForkedquestionQuestionParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RankingForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RankingFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRankingForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMinKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_2_1_0 = (RuleCall)cMinAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMaxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_3_1_0 = (RuleCall)cMaxAssignment_3_1.eContents().get(0);
		private final Keyword cMatcherKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMatcherAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMatcherChoiceCrossReference_5_0 = (CrossReference)cMatcherAssignment_5.eContents().get(0);
		private final RuleCall cMatcherChoiceEStringParserRuleCall_5_0_1 = (RuleCall)cMatcherChoiceCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cForkedquestionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cForkedquestionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cForkedquestionsQuestionParserRuleCall_6_2_0 = (RuleCall)cForkedquestionsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cForkedquestionsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cForkedquestionsQuestionParserRuleCall_6_3_1_0 = (RuleCall)cForkedquestionsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RankingFork:
		//	"RankingFork" "{" ("min" min=EInt)? ("max" max=EInt)? "matcher" matcher=[Choice|EString] ("forkedquestions" "{"
		//	forkedquestions+=Question ("," forkedquestions+=Question)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"RankingFork" "{" ("min" min=EInt)? ("max" max=EInt)? "matcher" matcher=[Choice|EString] ("forkedquestions" "{"
		//forkedquestions+=Question ("," forkedquestions+=Question)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"RankingFork"
		public Keyword getRankingForkKeyword_0() { return cRankingForkKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("min" min=EInt)?
		public Group getGroup_2() { return cGroup_2; }

		//"min"
		public Keyword getMinKeyword_2_0() { return cMinKeyword_2_0; }

		//min=EInt
		public Assignment getMinAssignment_2_1() { return cMinAssignment_2_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_2_1_0() { return cMinEIntParserRuleCall_2_1_0; }

		//("max" max=EInt)?
		public Group getGroup_3() { return cGroup_3; }

		//"max"
		public Keyword getMaxKeyword_3_0() { return cMaxKeyword_3_0; }

		//max=EInt
		public Assignment getMaxAssignment_3_1() { return cMaxAssignment_3_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_3_1_0() { return cMaxEIntParserRuleCall_3_1_0; }

		//"matcher"
		public Keyword getMatcherKeyword_4() { return cMatcherKeyword_4; }

		//matcher=[Choice|EString]
		public Assignment getMatcherAssignment_5() { return cMatcherAssignment_5; }

		//[Choice|EString]
		public CrossReference getMatcherChoiceCrossReference_5_0() { return cMatcherChoiceCrossReference_5_0; }

		//EString
		public RuleCall getMatcherChoiceEStringParserRuleCall_5_0_1() { return cMatcherChoiceEStringParserRuleCall_5_0_1; }

		//("forkedquestions" "{" forkedquestions+=Question ("," forkedquestions+=Question)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"forkedquestions"
		public Keyword getForkedquestionsKeyword_6_0() { return cForkedquestionsKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//forkedquestions+=Question
		public Assignment getForkedquestionsAssignment_6_2() { return cForkedquestionsAssignment_6_2; }

		//Question
		public RuleCall getForkedquestionsQuestionParserRuleCall_6_2_0() { return cForkedquestionsQuestionParserRuleCall_6_2_0; }

		//("," forkedquestions+=Question)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//forkedquestions+=Question
		public Assignment getForkedquestionsAssignment_6_3_1() { return cForkedquestionsAssignment_6_3_1; }

		//Question
		public RuleCall getForkedquestionsQuestionParserRuleCall_6_3_1_0() { return cForkedquestionsQuestionParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	
	private ModelElements pModel;
	private QuestionElements pQuestion;
	private SurveyElements pSurvey;
	private EStringElements pEString;
	private EBooleanElements pEBoolean;
	private MultipleChoiceElements pMultipleChoice;
	private OpenElements pOpen;
	private Rating_ImplElements pRating_Impl;
	private RankingElements pRanking;
	private DichotomousElements pDichotomous;
	private SumConstantElements pSumConstant;
	private StapleElements pStaple;
	private ChoiceElements pChoice;
	private MultipleChoiceForkElements pMultipleChoiceFork;
	private EIntElements pEInt;
	private RatingForkElements pRatingFork;
	private RankingForkElements pRankingFork;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.mddp.eank.survey.Survey".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} surveys+=Survey?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Question:
	//	MultipleChoice | Open | Rating_Impl | Ranking | Dichotomous | SumConstant | Staple;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Survey:
	//	{Survey} "Name" ":" (questions+=Question ("," questions+=Question)*)?;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//MultipleChoice:
	//	{MultipleChoice} "MultipleChoice" ":" "is required"? ("ask"? question=EString)? ("you"? "can"? "choose" "from"?
	//	"these"? choice+=Choice ("," choice+=Choice)*)? ("or" "free"? "form"? "choice"? other=EString)? ("conditionals" ":"
	//	MultipleChoiceForks+=MultipleChoiceFork ("," MultipleChoiceForks+=MultipleChoiceFork)*)?;
	public MultipleChoiceElements getMultipleChoiceAccess() {
		return (pMultipleChoice != null) ? pMultipleChoice : (pMultipleChoice = new MultipleChoiceElements());
	}
	
	public ParserRule getMultipleChoiceRule() {
		return getMultipleChoiceAccess().getRule();
	}

	//Open:
	//	{Open} "Open" ":" "is required"? question=EString? ("AnswerLength" AnswerLength=EString)?;
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	//Rating_Impl returns Rating:
	//	{Rating} required?="required"? "Rating" "{" ("question" question=EString)? ("Min" Min=EInt)? ("Max" Max=EInt)?
	//	("first" first=EString)? ("last" last=EString)? ("RatingForks" "{" RatingForks+=RatingFork (","
	//	RatingForks+=RatingFork)* "}")? "}";
	public Rating_ImplElements getRating_ImplAccess() {
		return (pRating_Impl != null) ? pRating_Impl : (pRating_Impl = new Rating_ImplElements());
	}
	
	public ParserRule getRating_ImplRule() {
		return getRating_ImplAccess().getRule();
	}

	//Ranking:
	//	required?="required"? "Ranking" "{" ("question" question=EString)? ("forks" "{" forks+=RankingFork (","
	//	forks+=RankingFork)* "}")? "choices" "{" choices+=Choice ("," choices+=Choice)* "}" "}";
	public RankingElements getRankingAccess() {
		return (pRanking != null) ? pRanking : (pRanking = new RankingElements());
	}
	
	public ParserRule getRankingRule() {
		return getRankingAccess().getRule();
	}

	//Dichotomous:
	//	{Dichotomous} required?="required"? "Dichotomous" "{" ("question" question=EString)? ("yes" "{" yes+=Question (","
	//	yes+=Question)* "}")? ("no" "{" no+=Question ("," no+=Question)* "}")? "}";
	public DichotomousElements getDichotomousAccess() {
		return (pDichotomous != null) ? pDichotomous : (pDichotomous = new DichotomousElements());
	}
	
	public ParserRule getDichotomousRule() {
		return getDichotomousAccess().getRule();
	}

	//SumConstant:
	//	{SumConstant} required?="required"? "SumConstant" "{" ("question" question=EString)? "}";
	public SumConstantElements getSumConstantAccess() {
		return (pSumConstant != null) ? pSumConstant : (pSumConstant = new SumConstantElements());
	}
	
	public ParserRule getSumConstantRule() {
		return getSumConstantAccess().getRule();
	}

	//Staple:
	//	{Staple} required?="required"? "Staple" "{" ("question" question=EString)? ("Min" Min=EInt)? ("Max" Max=EInt)?
	//	("first" first=EString)? ("last" last=EString)? ("mid" mid=EString)? ("RatingForks" "{" RatingForks+=RatingFork (","
	//	RatingForks+=RatingFork)* "}")? "}";
	public StapleElements getStapleAccess() {
		return (pStaple != null) ? pStaple : (pStaple = new StapleElements());
	}
	
	public ParserRule getStapleRule() {
		return getStapleAccess().getRule();
	}

	//Choice:
	//	Description=EString;
	public ChoiceElements getChoiceAccess() {
		return (pChoice != null) ? pChoice : (pChoice = new ChoiceElements());
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//MultipleChoiceFork:
	//	"condition" "matcher" matcher=[Choice] ("questions" ":" forkedquestions+=Question ("," forkedquestions+=Question)*)?;
	public MultipleChoiceForkElements getMultipleChoiceForkAccess() {
		return (pMultipleChoiceFork != null) ? pMultipleChoiceFork : (pMultipleChoiceFork = new MultipleChoiceForkElements());
	}
	
	public ParserRule getMultipleChoiceForkRule() {
		return getMultipleChoiceForkAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//RatingFork:
	//	{RatingFork} "RatingFork" "{" ("min" min=EInt)? ("max" max=EInt)? ("conditionals" "{" forkedquestion+=Question (","
	//	forkedquestion+=Question)* "}")? "}";
	public RatingForkElements getRatingForkAccess() {
		return (pRatingFork != null) ? pRatingFork : (pRatingFork = new RatingForkElements());
	}
	
	public ParserRule getRatingForkRule() {
		return getRatingForkAccess().getRule();
	}

	//RankingFork:
	//	"RankingFork" "{" ("min" min=EInt)? ("max" max=EInt)? "matcher" matcher=[Choice|EString] ("forkedquestions" "{"
	//	forkedquestions+=Question ("," forkedquestions+=Question)* "}")? "}";
	public RankingForkElements getRankingForkAccess() {
		return (pRankingFork != null) ? pRankingFork : (pRankingFork = new RankingForkElements());
	}
	
	public ParserRule getRankingForkRule() {
		return getRankingForkAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
